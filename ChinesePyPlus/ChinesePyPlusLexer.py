# Generated from ChinesePyPlus.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,1,0,1,0,1,1,1,1,1,1,1,
        2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,
        7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,
        13,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,
        33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,5,
        44,215,8,44,10,44,12,44,218,9,44,1,44,1,44,1,44,1,44,1,44,5,44,225,
        8,44,10,44,12,44,228,9,44,1,44,1,44,3,44,232,8,44,1,45,3,45,235,
        8,45,1,45,4,45,238,8,45,11,45,12,45,239,1,45,1,45,4,45,244,8,45,
        11,45,12,45,245,3,45,248,8,45,1,46,1,46,5,46,252,8,46,10,46,12,46,
        255,9,46,1,46,1,46,1,47,1,47,5,47,261,8,47,10,47,12,47,264,9,47,
        1,48,1,48,1,48,1,48,1,49,1,49,1,49,0,0,50,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
        57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
        79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,
        1,0,11,1,0,35,35,7,0,9,9,32,32,48,57,59,59,65,90,95,95,97,122,1,
        0,10,10,7,0,9,10,32,32,48,57,59,59,65,90,95,95,97,122,1,0,45,45,
        1,0,48,57,1,0,46,46,8,0,9,10,32,33,48,57,59,59,63,63,65,90,95,95,
        97,122,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,
        10,32,32,280,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,
        1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
        1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,
        1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
        1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
        1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,
        1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,
        1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,
        1,0,0,0,1,101,1,0,0,0,3,103,1,0,0,0,5,106,1,0,0,0,7,108,1,0,0,0,
        9,112,1,0,0,0,11,115,1,0,0,0,13,118,1,0,0,0,15,120,1,0,0,0,17,123,
        1,0,0,0,19,125,1,0,0,0,21,127,1,0,0,0,23,129,1,0,0,0,25,132,1,0,
        0,0,27,135,1,0,0,0,29,137,1,0,0,0,31,140,1,0,0,0,33,143,1,0,0,0,
        35,146,1,0,0,0,37,149,1,0,0,0,39,152,1,0,0,0,41,156,1,0,0,0,43,159,
        1,0,0,0,45,162,1,0,0,0,47,165,1,0,0,0,49,167,1,0,0,0,51,169,1,0,
        0,0,53,171,1,0,0,0,55,173,1,0,0,0,57,175,1,0,0,0,59,178,1,0,0,0,
        61,181,1,0,0,0,63,183,1,0,0,0,65,185,1,0,0,0,67,187,1,0,0,0,69,190,
        1,0,0,0,71,193,1,0,0,0,73,196,1,0,0,0,75,198,1,0,0,0,77,200,1,0,
        0,0,79,202,1,0,0,0,81,204,1,0,0,0,83,206,1,0,0,0,85,208,1,0,0,0,
        87,210,1,0,0,0,89,231,1,0,0,0,91,234,1,0,0,0,93,249,1,0,0,0,95,258,
        1,0,0,0,97,265,1,0,0,0,99,269,1,0,0,0,101,102,5,59,0,0,102,2,1,0,
        0,0,103,104,5,25976,0,0,104,105,5,20301,0,0,105,4,1,0,0,0,106,107,
        5,20018,0,0,107,6,1,0,0,0,108,109,5,23565,0,0,109,110,5,25110,0,
        0,110,111,5,37679,0,0,111,8,1,0,0,0,112,113,5,21015,0,0,113,114,
        5,33289,0,0,114,10,1,0,0,0,115,116,5,22914,0,0,116,117,5,26524,0,
        0,117,12,1,0,0,0,118,119,5,30340,0,0,119,14,1,0,0,0,120,121,5,21542,
        0,0,121,122,5,21063,0,0,122,16,1,0,0,0,123,124,5,32102,0,0,124,18,
        1,0,0,0,125,126,5,25171,0,0,126,20,1,0,0,0,127,128,5,36943,0,0,128,
        22,1,0,0,0,129,130,5,20760,0,0,130,131,5,31649,0,0,131,24,1,0,0,
        0,132,133,5,19981,0,0,133,134,5,26159,0,0,134,26,1,0,0,0,135,136,
        5,21644,0,0,136,28,1,0,0,0,137,138,5,25110,0,0,138,139,5,32773,0,
        0,139,30,1,0,0,0,140,141,5,21151,0,0,141,142,5,33021,0,0,142,32,
        1,0,0,0,143,144,5,36820,0,0,144,145,5,22238,0,0,145,34,1,0,0,0,146,
        147,5,21015,0,0,147,148,5,21360,0,0,148,36,1,0,0,0,149,150,5,30495,
        0,0,150,151,5,30340,0,0,151,38,1,0,0,0,152,153,5,37679,0,0,153,154,
        5,35492,0,0,154,155,5,30340,0,0,155,40,1,0,0,0,156,157,5,32080,0,
        0,157,158,5,23614,0,0,158,42,1,0,0,0,159,160,5,20241,0,0,160,161,
        5,24687,0,0,161,44,1,0,0,0,162,163,5,32380,0,0,163,164,5,32396,0,
        0,164,46,1,0,0,0,165,166,5,43,0,0,166,48,1,0,0,0,167,168,5,45,0,
        0,168,50,1,0,0,0,169,170,5,42,0,0,170,52,1,0,0,0,171,172,5,47,0,
        0,172,54,1,0,0,0,173,174,5,94,0,0,174,56,1,0,0,0,175,176,5,43,0,
        0,176,177,5,43,0,0,177,58,1,0,0,0,178,179,5,60,0,0,179,180,5,45,
        0,0,180,60,1,0,0,0,181,182,5,62,0,0,182,62,1,0,0,0,183,184,5,60,
        0,0,184,64,1,0,0,0,185,186,5,61,0,0,186,66,1,0,0,0,187,188,5,62,
        0,0,188,189,5,61,0,0,189,68,1,0,0,0,190,191,5,60,0,0,191,192,5,61,
        0,0,192,70,1,0,0,0,193,194,5,47,0,0,194,195,5,61,0,0,195,72,1,0,
        0,0,196,197,5,58,0,0,197,74,1,0,0,0,198,199,5,40,0,0,199,76,1,0,
        0,0,200,201,5,41,0,0,201,78,1,0,0,0,202,203,5,91,0,0,203,80,1,0,
        0,0,204,205,5,93,0,0,205,82,1,0,0,0,206,207,5,44,0,0,207,84,1,0,
        0,0,208,209,5,123,0,0,209,86,1,0,0,0,210,211,5,125,0,0,211,88,1,
        0,0,0,212,216,7,0,0,0,213,215,7,1,0,0,214,213,1,0,0,0,215,218,1,
        0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,219,1,0,0,0,218,216,1,
        0,0,0,219,232,7,2,0,0,220,221,5,35,0,0,221,222,5,123,0,0,222,226,
        1,0,0,0,223,225,7,3,0,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,
        1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,
        5,125,0,0,230,232,5,35,0,0,231,212,1,0,0,0,231,220,1,0,0,0,232,90,
        1,0,0,0,233,235,7,4,0,0,234,233,1,0,0,0,234,235,1,0,0,0,235,237,
        1,0,0,0,236,238,7,5,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,237,
        1,0,0,0,239,240,1,0,0,0,240,247,1,0,0,0,241,243,7,6,0,0,242,244,
        7,5,0,0,243,242,1,0,0,0,244,245,1,0,0,0,245,243,1,0,0,0,245,246,
        1,0,0,0,246,248,1,0,0,0,247,241,1,0,0,0,247,248,1,0,0,0,248,92,1,
        0,0,0,249,253,5,34,0,0,250,252,7,7,0,0,251,250,1,0,0,0,252,255,1,
        0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,
        0,0,0,256,257,5,34,0,0,257,94,1,0,0,0,258,262,7,8,0,0,259,261,7,
        9,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,
        0,0,0,263,96,1,0,0,0,264,262,1,0,0,0,265,266,7,10,0,0,266,267,1,
        0,0,0,267,268,6,48,0,0,268,98,1,0,0,0,269,270,5,58,0,0,270,271,5,
        41,0,0,271,100,1,0,0,0,10,0,216,226,231,234,239,245,247,253,262,
        1,6,0,0
    ]

class ChinesePyPlusLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TKN_END_LINE = 1
    TKN_NUMBER = 2
    TKN_STRING = 3
    TKN_BOOL = 4
    TKN_LIST = 5
    TKN_IF = 6
    TKN_ELSE = 7
    TKN_ELIF = 8
    TKN_FOR = 9
    TKN_FROM = 10
    TKN_TO = 11
    TKN_WHILE = 12
    TKN_NOT = 13
    TKN_AND = 14
    TKN_OR = 15
    TKN_FUNCTION = 16
    TKN_RETURN = 17
    TKN_PRINT = 18
    TKN_TRUE = 19
    TKN_FALSE = 20
    TKN_END = 21
    TKN_BREAK = 22
    TKN_CONTINUE = 23
    TKN_PLUS = 24
    TKN_MINUS = 25
    TKN_MUL = 26
    TKN_DIV = 27
    TKN_POW = 28
    TKN_CONCAT = 29
    TKN_ASSIGN = 30
    TKN_G = 31
    TKN_L = 32
    TKN_EQ = 33
    TKN_GEQ = 34
    TKN_LEQ = 35
    TKN_NEQ = 36
    TKN_DOTS = 37
    TKN_LBRACKET = 38
    TKN_RBRACKET = 39
    TKN_LSQUARE = 40
    TKN_RSQUARE = 41
    TKN_COMMA = 42
    TKN_LFUNBRACKET = 43
    TKN_RFUNBRACKET = 44
    TKN_COMMENT = 45
    TKN_NUMBER_VAL = 46
    TKN_STRING_VAL = 47
    TKN_VAR_ID = 48
    TKN_WHITESPACE = 49
    TKN_END_OF_FILE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "';'", "'\\u6578\\u4F4D'", "'\\u4E32'", "'\\u5C0D\\u6216\\u932F'", 
            "'\\u5217\\u8209'", "'\\u5982\\u679C'", "'\\u7684'", "'\\u5426\\u5247'", 
            "'\\u7D66'", "'\\u6253'", "'\\u904F'", "'\\u5118\\u7BA1'", "'\\u4E0D\\u662F'", 
            "'\\u548C'", "'\\u6216\\u8005'", "'\\u529F\\u80FD'", "'\\u8FD4\\u56DE'", 
            "'\\u5217\\u5370'", "'\\u771F\\u7684'", "'\\u932F\\u8AA4\\u7684'", 
            "'\\u7D50\\u5C3E'", "'\\u4F11\\u606F'", "'\\u7E7C\\u7E8C'", 
            "'+'", "'-'", "'*'", "'/'", "'^'", "'++'", "'<-'", "'>'", "'<'", 
            "'='", "'>='", "'<='", "'/='", "':'", "'('", "')'", "'['", "']'", 
            "','", "'{'", "'}'", "':)'" ]

    symbolicNames = [ "<INVALID>",
            "TKN_END_LINE", "TKN_NUMBER", "TKN_STRING", "TKN_BOOL", "TKN_LIST", 
            "TKN_IF", "TKN_ELSE", "TKN_ELIF", "TKN_FOR", "TKN_FROM", "TKN_TO", 
            "TKN_WHILE", "TKN_NOT", "TKN_AND", "TKN_OR", "TKN_FUNCTION", 
            "TKN_RETURN", "TKN_PRINT", "TKN_TRUE", "TKN_FALSE", "TKN_END", 
            "TKN_BREAK", "TKN_CONTINUE", "TKN_PLUS", "TKN_MINUS", "TKN_MUL", 
            "TKN_DIV", "TKN_POW", "TKN_CONCAT", "TKN_ASSIGN", "TKN_G", "TKN_L", 
            "TKN_EQ", "TKN_GEQ", "TKN_LEQ", "TKN_NEQ", "TKN_DOTS", "TKN_LBRACKET", 
            "TKN_RBRACKET", "TKN_LSQUARE", "TKN_RSQUARE", "TKN_COMMA", "TKN_LFUNBRACKET", 
            "TKN_RFUNBRACKET", "TKN_COMMENT", "TKN_NUMBER_VAL", "TKN_STRING_VAL", 
            "TKN_VAR_ID", "TKN_WHITESPACE", "TKN_END_OF_FILE" ]

    ruleNames = [ "TKN_END_LINE", "TKN_NUMBER", "TKN_STRING", "TKN_BOOL", 
                  "TKN_LIST", "TKN_IF", "TKN_ELSE", "TKN_ELIF", "TKN_FOR", 
                  "TKN_FROM", "TKN_TO", "TKN_WHILE", "TKN_NOT", "TKN_AND", 
                  "TKN_OR", "TKN_FUNCTION", "TKN_RETURN", "TKN_PRINT", "TKN_TRUE", 
                  "TKN_FALSE", "TKN_END", "TKN_BREAK", "TKN_CONTINUE", "TKN_PLUS", 
                  "TKN_MINUS", "TKN_MUL", "TKN_DIV", "TKN_POW", "TKN_CONCAT", 
                  "TKN_ASSIGN", "TKN_G", "TKN_L", "TKN_EQ", "TKN_GEQ", "TKN_LEQ", 
                  "TKN_NEQ", "TKN_DOTS", "TKN_LBRACKET", "TKN_RBRACKET", 
                  "TKN_LSQUARE", "TKN_RSQUARE", "TKN_COMMA", "TKN_LFUNBRACKET", 
                  "TKN_RFUNBRACKET", "TKN_COMMENT", "TKN_NUMBER_VAL", "TKN_STRING_VAL", 
                  "TKN_VAR_ID", "TKN_WHITESPACE", "TKN_END_OF_FILE" ]

    grammarFileName = "ChinesePyPlus.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


